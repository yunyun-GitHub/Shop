"""
Django settings for Server project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# ************开发环境的配置************
# SECRET_KEY = 'django-insecure-byh4pij#u-^$0u-b7o@oe)1(s$=sn30366(!^lkgk84mzhq0p6'  # 生產環境中會重新生成
# DEBUG = True
# ALLOWED_HOSTS = []
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
# ************生产环境的配置************
SECRET_KEY = os.environ.get('SECRET_KEY')  # 生產環境,重新生成
DEBUG = False
ALLOWED_HOSTS = ['*']  # 允许所有主机连接
DATABASES = {
    'default': {
        'ENGINE': os.environ.get('DB_ENGINE'),  # 數據庫引擎
        'HOST': os.environ.get('DB_HOST'),  # 数据库主机或服务器域名
        'PORT': os.environ.get('DB_PORT'),  # 数据库端口
        'NAME': os.environ.get('DB_NAME'),  # 数据库名字
        'USER': os.environ.get('DB_USER'),  # 数据库用户名
        'PASSWORD': os.environ.get('DB_PASSWORD'),  # 数据库用户密码
    }
}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',  # DRF
    'corsheaders',  # 支持跨域請求
    'rest_framework_simplejwt',  # 用於登錄
    'django_filters',  # 過濾器
    'ckeditor',  # 富文本編輯器
    'users',
    'cart',
    'goods',
    'order',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # 支持跨域請求(要放到第一行)
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',  # 注釋掉csrf
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Server.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'
# TIME_ZONE = 'UTC'
LANGUAGE_CODE = 'zh-hans'  # 語言使用中文
TIME_ZONE = 'Asia/Shanghai'  # 設置時區

USE_I18N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ****************************下面都是新增的配置****************************
CORS_ORIGIN_ALLOW_ALL = True  # 允許所有用戶跨域請求
AUTH_USER_MODEL = 'users.User'  # 自定义用户模型
MEDIA_URL = 'media/'  # 指定文件的獲取的url路徑
MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')  # 文件上傳的保存路徑
STATIC_URL = 'framework_static/'
STATIC_ROOT = os.path.join(BASE_DIR, "framework_static/")  # 把静态文件收集到 STATIC_ROOT中

# DRF的配置
REST_FRAMEWORK = {
    # 配置登錄鑒權方式
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    # 配置DRF使用的過濾器和排序器
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.OrderingFilter',
    ],
    # 配置限流頻率
    'DEFAULT_THROTTLE_RATES': {
        'anon': '1/minute',
    },
}

# token的相關配置
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=30),  # 訪問令牌的有效時間
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),  # 刷新令牌的有效時間

    "ROTATE_REFRESH_TOKENS": False,  # 若爲True, 則刷新后新的refresh_token有更新的有效時間
    "BLACKLIST_AFTER_ROTATION": True,  # 若爲True, 則刷新后的token將添加到黑名單中

    "ALGORITHM": "HS256",  # 對稱算法:HS256 HS384 HS512  非對稱算法: RSA
    "SIGNING_KEY": SECRET_KEY,
    "VERIFYING_KEY": None,  # if signing_key, verifying_key will be ignored.
    "AUDIENCE": None,
    "ISSUER": None,

    "AUTH_HEADER_TYPES": ("Bearer",),  # Authorization: Bearer <token>
    "AUTH_HEADER_NAME": "HTTP_AUTHORIZATION",  # if HTTP_X_ACCESS_TOKEN, X_ACCESS_TOKEN:Bearer <token>
    "USER_ID_FIELD": "id",  # 使用唯一不變的數據庫字段,將包含在生成的令牌中以表示用戶
    "USER_ID_CLAIM": "user_id",
}

# 使用自定義的認證類進行身份認證(登錄是驗證用戶信息)
AUTHENTICATION_BACKENDS = [
    'common.authenticate.MyBackend'
]
